{"version":3,"sources":["webpack:///webpack/bootstrap?7f80","webpack:///external \"express-msteams-host\"?e438","webpack:///external \"debug\"?b2c7","webpack:///external \"botbuilder-dialogs\"?4042","webpack:///./src/app/server.ts?53c8","webpack:///external \"express\"?22fe","[]","webpack:///external \"path\"?74bb","webpack:///external \"morgan\"?3206","webpack:///external \"dotenv\"?e70f","webpack:///./src/app/TeamsAppsComponents.ts?b0db","webpack:///./src/app/acPrototypeTab/AcPrototypeTab.ts?a343","webpack:///./src/app/acPrototypeBot/AcPrototypeBot.ts?5403","webpack:///external \"botbuilder\"?fa14","webpack:///external \"botframework-connector\"?e445","webpack:///./src/app/acPrototypeBot/dialogs/HelpDialog.ts?f71d","webpack:///./src/app/acPrototypeBot/dialogs/WelcomeDialog.ts?775e","webpack:///./src/app/acPrototypeBot/dialogs/VideoPlayerCard.ts?d01d","webpack:///external \"botbuilder-teams\"?cb0c","webpack:///./src/app/acPrototypeBot/dialogs/AdminCard.ts?9219","webpack:///./src/app/acPrototypeBot/dialogs/QuickActionsCard.ts?cdac","webpack:///./src/app/acPrototypeBot/dialogs/ManagerDashboard.ts?4e72","webpack:///./src/app/acPrototypeBot/dialogs/interviewCandidates.ts?fa00","webpack:///./src/app/acPrototypeBot/dialogs/SuccessCard.ts?2dbf"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","log","debug","config","express","Express","port","process","env","PORT","use","json","verify","req","res","buf","encoding","rawBody","toString","urlencoded","extended","set","path","join","__dirname","morgan","static","MsTeamsApiRouter","allComponents","MsTeamsPageRouter","root","components","index","http","createServer","listen","nonce","AcPrototypeTab","PreventIframe","AcPrototypeBot","conversationState","activityProc","TeamsActivityProcessor","credentials","MicrosoftAppCredentials","MICROSOFT_APP_ID","MICROSOFT_APP_PASSWORD","this","dialogState","createProperty","dialogs","DialogSet","add","trustServiceUrl","messageActivityHandler","onMessage","context","teamsContext","TeamsContext","from","activity","type","ActivityTypes","Message","text","getActivityTextWithoutMentions","toLowerCase","startsWith","sendActivity","dc","createContext","beginDialog","includes","welcomeCard","CardFactory","adaptiveCard","attachments","err","console","Invoke","saveChanges","conversationUpdateActivityHandler","onConversationUpdateActivity","membersAdded","length","idx","id","recipient","messageReactionActivityHandler","onMessageReaction","added","reactionsAdded","textFormat","invokeActivityHandler","onInvoke","ctx","adminCard","quickActionsCard","managerCard","videoPlayerCard","interviewCard","successCard","responseBody","content","creator","profileImage","workdayTabResponse","tab","cards","card","sampleTabResponse","tabSubmitResponse","task","height","width","title","tabContext","tabEntityId","status","body","processIncomingActivity","BotDeclaration","MemoryStorage","HelpDialog","Dialog","dialogId","super","options","endDialog","WelcomeCard","VideoPlayerCard","AdminCard","QuickActionCard","ManagerDashboardCard","InterviewCandidatesCard","SuccessCard"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"express-msteams-host\");","module.exports = require(\"debug\");","module.exports = require(\"botbuilder-dialogs\");","import * as Express from \"express\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as morgan from \"morgan\";\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\nimport * as debug from \"debug\";\n\n\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\nlog(`Initializing Microsoft Teams Express hosted App...`);\n\n// Initialize dotenv, to use .env file settings if existing\n// tslint:disable-next-line:no-var-requires\nrequire(\"dotenv\").config();\n\n\n\n// The import of components has to be done AFTER the dotenv config\nimport * as allComponents from \"./TeamsAppsComponents\";\n\n// Create the Express webserver\nconst express = Express();\nconst port = process.env.port || process.env.PORT || 3007;\n\n// Inject the raw request body onto the request object\nexpress.use(Express.json({\n    verify: (req, res, buf: Buffer, encoding: string): void => {\n        (req as any).rawBody = buf.toString();\n    }\n}));\nexpress.use(Express.urlencoded({ extended: true }));\n\n// Express configuration\nexpress.set(\"views\", path.join(__dirname, \"/\"));\n\n// Add simple logging\nexpress.use(morgan(\"tiny\"));\n\n// Add /scripts and /assets as static folders\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\n\n// routing for bots, connectors and incoming web hooks - based on the decorators\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsApiRouter(allComponents));\n\n// routing for pages for tabs and connector configuration\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsPageRouter({\n    root: path.join(__dirname, \"web/\"),\n    components: allComponents\n}));\n\n// Set default web page\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\n    index: \"index.html\"\n}));\n\n// Set the port\nexpress.set(\"port\", port);\n\n// Start the webserver\nhttp.createServer(express).listen(port, () => {\n    log(`Server running on ${port}`);\n});\n","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"morgan\");","module.exports = require(\"dotenv\");","// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the acPrototypeTab tab\nexport * from \"./acPrototypeTab/AcPrototypeTab\";\n// Automatically added for the acPrototypeBot bot\nexport * from \"./acPrototypeBot/AcPrototypeBot\";\n","import { PreventIframe } from \"express-msteams-host\";\n\n/**\n * Used as place holder for the decorators\n */\n@PreventIframe(\"/acPrototypeTab/index.html\")\n\n\nexport class AcPrototypeTab {\n}\n","import {\r\n  BotDeclaration,\r\n  MessageExtensionDeclaration,\r\n  IBot,\r\n  PreventIframe,\r\n} from \"express-msteams-host\";\r\nimport * as debug from \"debug\";\r\nimport { DialogSet, DialogState } from \"botbuilder-dialogs\";\r\nimport {\r\n  StatePropertyAccessor,\r\n  CardFactory,\r\n  TurnContext,\r\n  MemoryStorage,\r\n  ConversationState,\r\n  ActivityTypes,\r\n  InvokeResponse,\r\n} from \"botbuilder\";\r\nimport { MicrosoftAppCredentials } from \"botframework-connector\";\r\nimport HelpDialog from \"./dialogs/HelpDialog\";\r\nimport WelcomeCard from \"./dialogs/WelcomeDialog\";\r\nimport VideoPlayerCard from \"./dialogs/VideoPlayerCard\";\r\nimport { TeamsContext, TeamsActivityProcessor } from \"botbuilder-teams\";\r\nimport AdminCard from \"./dialogs/AdminCard\";\r\nimport QuickActionCard from \"./dialogs/QuickActionsCard\";\r\nimport ManagerDashboardCard from \"./dialogs/ManagerDashboard\";\r\nimport InterviewCandidatesCard from \"./dialogs/interviewCandidates\";\r\nimport SuccessCard from \"./dialogs/SuccessCard\";\r\n\r\n// Initialize debug logging module\r\nconst log = debug(\"msteams\");\r\n\r\n/**\r\n * Implementation for acPrototype Bot\r\n */\r\n@BotDeclaration(\r\n  \"/api/messages\",\r\n  new MemoryStorage(),\r\n  process.env.MICROSOFT_APP_ID,\r\n  process.env.MICROSOFT_APP_PASSWORD\r\n)\r\n@PreventIframe(\"/acPrototypeBot/acProtoBotTab.html\")\r\nexport class AcPrototypeBot implements IBot {\r\n  private readonly conversationState: ConversationState;\r\n  private readonly dialogs: DialogSet;\r\n  private dialogState: StatePropertyAccessor<DialogState>;\r\n  private readonly activityProc = new TeamsActivityProcessor();\r\n  private readonly credentials = new MicrosoftAppCredentials(\r\n    process.env.MICROSOFT_APP_ID || \"\",\r\n    process.env.MICROSOFT_APP_PASSWORD || \"\"\r\n  );\r\n  /**\r\n   * The constructor\r\n   * @param conversationState\r\n   */\r\n  public constructor(conversationState: ConversationState) {\r\n    this.conversationState = conversationState;\r\n    this.dialogState = conversationState.createProperty(\"dialogState\");\r\n    this.dialogs = new DialogSet(this.dialogState);\r\n    this.dialogs.add(new HelpDialog(\"help\"));\r\n\r\n    MicrosoftAppCredentials.trustServiceUrl(\r\n      \"https://smba-int.cloudapp.net/teams-int-mock/\"\r\n    );\r\n\r\n    // Set up the Activity processing\r\n\r\n    this.activityProc.messageActivityHandler = {\r\n      // Incoming messages\r\n      onMessage: async (context: TurnContext): Promise<void> => {\r\n        // get the Microsoft Teams context, will be undefined if not in Microsoft Teams\r\n        const teamsContext: TeamsContext = TeamsContext.from(context);\r\n\r\n        // TODO: add your own bot logic in here\r\n        switch (context.activity.type) {\r\n          case ActivityTypes.Message:\r\n            const text = teamsContext\r\n              ? teamsContext.getActivityTextWithoutMentions().toLowerCase()\r\n              : context.activity.text;\r\n\r\n            if (text.startsWith(\"hello\")) {\r\n              await context.sendActivity(\"Oh, hello to you as well!\");\r\n              return;\r\n            } else if (text.startsWith(\"help\")) {\r\n              const dc = await this.dialogs.createContext(context);\r\n              await dc.beginDialog(\"help\");\r\n            } else if (text.includes(\"card\")) {\r\n              try {\r\n                const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\r\n                await context.sendActivity({ attachments: [welcomeCard] });\r\n              } catch (err) {\r\n                console.log(err);\r\n              }\r\n            } else {\r\n              console.log(text);\r\n              await context.sendActivity(\r\n                `I\\'m terribly sorry, but my master hasn\\'t trained me to do anything yet...`\r\n              );\r\n            }\r\n            break;\r\n          case ActivityTypes.Invoke:\r\n          default:\r\n            break;\r\n        }\r\n\r\n        // Save state changes\r\n        return this.conversationState.saveChanges(context);\r\n      },\r\n    };\r\n\r\n    this.activityProc.conversationUpdateActivityHandler = {\r\n      onConversationUpdateActivity: async (\r\n        context: TurnContext\r\n      ): Promise<void> => {\r\n        if (\r\n          context.activity.membersAdded &&\r\n          context.activity.membersAdded.length !== 0\r\n        ) {\r\n          for (const idx in context.activity.membersAdded) {\r\n            if (\r\n              context.activity.membersAdded[idx].id ===\r\n              context.activity.recipient.id\r\n            ) {\r\n              const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\r\n              await context.sendActivity({ attachments: [welcomeCard] });\r\n            }\r\n          }\r\n        }\r\n      },\r\n    };\r\n\r\n    // Message reactions in Microsoft Teams\r\n    this.activityProc.messageReactionActivityHandler = {\r\n      onMessageReaction: async (context: TurnContext): Promise<void> => {\r\n        const added = context.activity.reactionsAdded;\r\n        if (added && added[0]) {\r\n          await context.sendActivity({\r\n            textFormat: \"xml\",\r\n            text: `That was an interesting reaction (<b>${added[0].type}</b>)`,\r\n          });\r\n        }\r\n      },\r\n    };\r\n\r\n    this.activityProc.invokeActivityHandler = {\r\n      onInvoke: async (context: TurnContext): Promise<InvokeResponse> => {\r\n        const ctx: any = context;\r\n        // console.log(ctx.activity.value);\r\n        // console.log(ctx.activity.value.tabContext);\r\n\r\n        const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\r\n        const adminCard = CardFactory.adaptiveCard(AdminCard);\r\n        const quickActionsCard = CardFactory.adaptiveCard(QuickActionCard);\r\n        const managerCard = CardFactory.adaptiveCard(ManagerDashboardCard);\r\n        const videoPlayerCard = CardFactory.adaptiveCard(VideoPlayerCard);\r\n        const interviewCard = CardFactory.adaptiveCard(InterviewCandidatesCard);\r\n        const successCard = CardFactory.adaptiveCard(SuccessCard);\r\n        // Return the specified task module response to the bot\r\n\r\n        // tslint:disable-next-line: no-string-literal\r\n        managerCard.content[\"$data\"] = {\r\n          creator: {\r\n            name: ctx.activity.name,\r\n            profileImage: \"https://randomuser.me/api/portraits/women/32.jpg\",\r\n          },\r\n        };\r\n        let responseBody: any;\r\n\r\n        const workdayTabResponse: any = {\r\n          tab: {\r\n            type: \"continue\",\r\n            value: {\r\n              cards: [\r\n                { card: quickActionsCard.content },\r\n                { card: managerCard.content },\r\n                { card: adminCard.content },\r\n              ],\r\n            },\r\n          },\r\n        };\r\n\r\n        const sampleTabResponse: any = {\r\n          tab: {\r\n            type: \"continue\",\r\n            value: {\r\n              cards: [\r\n                { card: welcomeCard.content },\r\n                { card: interviewCard.content },\r\n                { card: videoPlayerCard.content },\r\n              ],\r\n            },\r\n          },\r\n        };\r\n\r\n        const tabSubmitResponse: any = {\r\n          tab: {\r\n            type: \"continue\",\r\n            value: {\r\n              cards: [\r\n                { card: successCard.content },\r\n                { card: quickActionsCard.content },\r\n                { card: managerCard.content },\r\n                { card: adminCard.content },\r\n              ],\r\n            },\r\n          },\r\n        };\r\n\r\n        switch (ctx.activity.name) {\r\n          case \"task/fetch\":\r\n            responseBody = {\r\n              task: {\r\n                type: \"continue\",\r\n                value: {\r\n                  height: \"medium\",\r\n                  width: \"medium\",\r\n                  title: \"task\",\r\n                  card: videoPlayerCard,\r\n                },\r\n              },\r\n            };\r\n            break;\r\n          case \"task/submit\":\r\n            responseBody = {\r\n              task: {\r\n                type: \"continue\",\r\n                value: tabSubmitResponse,\r\n              },\r\n            };\r\n            break;\r\n          case \"tab/submit\":\r\n            responseBody = tabSubmitResponse;\r\n            break;\r\n          case \"tab/fetch\":\r\n          default:\r\n            if (ctx.activity.value.tabContext.tabEntityId === \"workday\") {\r\n              responseBody = workdayTabResponse;\r\n            } else {\r\n              responseBody = sampleTabResponse;\r\n            }\r\n            break;\r\n        }\r\n        return { status: 200, body: responseBody };\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * The Bot Framework `onTurn` handler.\r\n   * The Microsoft Teams middleware for Bot Framework uses a custom activity processor (`TeamsActivityProcessor`)\r\n   * which is configured in the constructor of this sample\r\n   */\r\n  public async onTurn(context: TurnContext): Promise<any> {\r\n    // transfer the activity to the TeamsActivityProcessor\r\n    await this.activityProc.processIncomingActivity(context);\r\n  }\r\n}\r\n","module.exports = require(\"botbuilder\");","module.exports = require(\"botframework-connector\");","import { Dialog, DialogContext, DialogTurnResult } from 'botbuilder-dialogs';\n\nexport default class HelpDialog extends Dialog {\n    constructor(dialogId: string) {\n        super(dialogId);\n    }\n\n    public async beginDialog(context: DialogContext, options?: any): Promise<DialogTurnResult> {\n        context.context.sendActivity(`I'm just a friendly but rather stupid bot, and right now I don't have any valuable help for you!`);\n        return await context.endDialog();\n    }\n}\n","const WelcomeCard = require(\"./WelcomeCard.json\");\n\nexport default WelcomeCard;\n","const VideoPlayerCard = require(\"./VideoPlayerCard.json\");\r\n\r\nexport default VideoPlayerCard;\r\n","module.exports = require(\"botbuilder-teams\");","const AdminCard = require(\"./admin-config.json\");\r\n\r\nexport default AdminCard;\r\n","const QuickActionCard = require(\"./quick-actions.json\");\r\n\r\nexport default QuickActionCard;\r\n","const ManagerDashboardCard = require(\"./manager-dashboard.json\");\r\n\r\nexport default ManagerDashboardCard;\r\n","const InterviewCandidatesCard = require(\"./interview-candidates.json\");\r\n\r\nexport default InterviewCandidatesCard;\r\n","const SuccessCard = require(\"./success-card.json\");\r\n\r\nexport default SuccessCard;\r\n"],"sourceRoot":""}